<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- 加载数据库属性文件 -->
<properties resource="db.properties"></properties>

<!-- 开启懒加载配置 -->
<settings>
	<!-- 全局性设置懒加载。如果设为‘false'，则所有相关联的都会被初始化加载。 -->
	<setting name="lazyLoadingEnabled" value="true"/>
	<!-- 当设置为‘true'的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。 -->
	<setting name="aggressiveLazyLoading" value="true"/>
</settings>
<!-- 定义别名 -->
<typeAliases>
	<!-- mybatis自动扫描包中的po类，自动定义别名，别名是类名(首字母大写或小写都可以,一般用小写) -->
	<package name="com.ys.po"/>
</typeAliases>
 <environments default="development">
    <environment id="development">
      <transactionManager type="JDBC"/>
      <!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源  -->
      <dataSource type="POOLED">
        <property name="driver" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
      </dataSource>
    </environment>
  </environments>
  
  <mappers>
         <!-- 通过OrdersMapper接口注册OrdersMapper.xml文件， 
         	必须保证：接口和xml在同一个包下，而且名字一样
         	OrdersMapper接口的方法名和OrdersMapper.xml文件的id一样
         	OrdersMapper接口的输出输出参数和OrdersMapper.xml文件resultType，parameterType类型一样-->
         <mapper class="one.to.one.mapper.OrdersMapper"/> 
         <!--一对多  -->
         <mapper class="one.to.many.mapper.UserMapper"/> 
         <!--多对多  -->
         <mapper class="many.to.many.mapper.UserMapper"/> 
         <!-- 懒加载 -->
         <mapper class="com.ys.lazyload.OrdersMapper"/>
  </mappers>
</configuration>
